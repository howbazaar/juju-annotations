#!/usr/bin/env python3

"""
This example:

1. Connects to the model specified or the current model
2. Gets the annotations

"""
import argparse
import logging
import re
import sys
import yaml

from juju import loop
from juju.model import Model
from juju.client import client


_application_snippet = "(?:[a-z][a-z0-9]*(?:-[a-z0-9]*[a-z][a-z0-9]*)*)"
_number_snippet      = "(?:0|[1-9][0-9]*)"
_container_type_snippet = "[a-z]+"
_container_snippet   = "/" + _container_type_snippet + "/" + _number_snippet
_machine_snippet     = _number_snippet + "(?:" + _container_snippet + ")*"

valid_application = re.compile("^" + _application_snippet + "$")
valid_unit = re.compile("^" + _application_snippet + "/" + _number_snippet + "$")
valid_machine = re.compile("^" + _machine_snippet + "$")


def get_entity(model, entity):
    if entity == "@model":
        return model

    if valid_application.match(entity):
        return model.applications[entity]

    if valid_machine.match(entity):
        return model.machines[entity]

    if valid_unit.match(entity):
        return model.units[entity]

    raise RuntimeError("unknown entity type")


def make_dict(options):
    result = {}
    for item in options:
        bits = item.split("=",1)
        if len(bits) < 2:
            raise ValueError("option expected to be 'key=value', got {}".format(item))
        key, value = bits
        result[key] = value
    return result


async def main(args):
    model = Model()
    await model.connect(args.model)

    try:
        entity = get_entity(model, args.entity)

        if len(args.annotation) == 0:
            annotations = await entity.get_annotations()
            yaml.dump(annotations, stream=sys.stdout, default_flow_style=False)
            return


        annotations = make_dict(args.annotation)
        await entity.set_annotations(annotations)

    finally:
        await model.disconnect()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog="juju annotate")
    parser.add_argument("entity", help="which application to act on")
    parser.add_argument("annotation", nargs="*", help="annotations to set in the form key=value")
    parser.add_argument("--debug", help="output debugging", action="store_true")
    parser.add_argument("--describe", help="short description", action="store_true")
    parser.add_argument("-m", "--model", help="model name")
    args = parser.parse_args()

    if args.describe:
        print("allows setting and getting of annotations")
        sys.exit(0)

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
        ws_logger = logging.getLogger('websockets.protocol')
        ws_logger.setLevel(logging.INFO)


    loop.run(main(args))

